NOTES:
* IMM3 is a 3-bit immediate using sign/magnitude representation:
  * bit 2 = sign, value = bits 1 and 0
* IMM4: 4-bit immed using 2's complement representation
* IMM5: 5-bit unsigned
* EXT(X): sign-extend X to 8 bits
  * eg: 101 = 5; EXT(101) = 00000101
  * eg: 1101 = -3; EXT(1101) = 11111101
* R1, R2: registers variables
* TMP = temporary variable

Register Transfer Notation:

LOAD R1 (R2):
     TMP = MEM[[R2]]
     R1 = TMP
     [PC] = [PC] + 1

STORE R1 (R2):
     MEM[[R2]] = [R1]
     [PC] = [PC] + 1

ADD R1 R2
     TMP = [R1] + [R2]
     R1 = TMP
     IF (TMP == 0) Z = 1; ELSE Z = 0;
     IF (TMP < 0) N = 1; ELSE N = 0;
     [PC] = [PC] + 1

SUB R1 R2
     TMP = [R1] - [R2]
     R1 = TMP
     IF (TMP == 0) Z = 1; ELSE Z = 0;
     IF (TMP < 0) N = 1; ELSE N = 0;
     [PC] = [PC] + 1

NAND R1 R2
     TMP = [R1] bitwise-NAND [R2]
     R1 = TMP
     IF (TMP == 0) Z = 1; ELSE Z = 0;
     IF (TMP < 0) N = 1; ELSE N = 0;
     [PC] = [PC] + 1

ORI IMM5
    TMP = [K1] bitwise-OR IMM5
    [K1] = TMP
    IF (TMP == 0) Z = 1; ELSE Z = 0;
    IF (TMP < 0) N = 1; ELSE N = 0;
    [PC] = [PC] + 1

SHIFT R1 IMM3
    IF (IMM3 > 0) TMP = [R1] << IMM3
    ELSE TMP = [R1] >> (-IMM3)
    R1 = TMP
    IF (TMP == 0) Z = 1; ELSE Z = 0;
    IF (TMP < 0) N = 1; ELSE N = 0;
    [PC] = [PC] + 1

BZ IMM4
     IF (Z == 1) PC = [PC] + EXT(IMM4)
     [PC] = [PC] + 1

BNZ IMM4
     IF (Z == 0) PC = [PC] + EXT(IMM4)
     [PC] = [PC] + 1

BPZ IMM4
     IF (N == 0) PC = [PC] + EXT(IMM4)
     [PC] = [PC] + 1


Instruction Encodings:
Legend:
Rx = 2 bit encoding of register
I  = immediate value

Bit [MSB]76543210[LSB]

LOAD:    R1R20000
STORE:	 R1R20010
ADD:	 R1R20100
SUB:	 R1R20110
NAND:	 R1R21000
ORI:	 IIIII111
SHIFT:	 R1III011
BZ:	 IIII0101
BNZ:	 IIII1001
BPZ:	 IIII1101

STOP:	 00000001
NOP:	 00001010
